<tokens>
<keyword> class </keyword>
<identifier> Board </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> board </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> squareSize </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> borderThickness </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> EMPTY_VAL </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> X_VAL </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> O_VAL </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Board </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> Ax </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Ay </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AsquareSize </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AborderThickness </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Ax </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> Ay </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> squareSize </identifier>
<symbol> = </symbol>
<identifier> AsquareSize </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> borderThickness </identifier>
<symbol> = </symbol>
<identifier> AborderThickness </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> EMPTY_VAL </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> X_VAL </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> O_VAL </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> initBoard </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> initBoard </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> board </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> EMPTY_VAL </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> board </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> choice </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> &gt; </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> temp </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setVal </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> choice </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> val </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> val </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawX </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> location </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> memAddress </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> location </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> memAddress </identifier>
<symbol> = </symbol>
<identifier> location </identifier>
<symbol> + </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<symbol> - </symbol>
<integerConstant> 16381 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 32 </integerConstant>
<symbol> , </symbol>
<symbol> - </symbol>
<integerConstant> 8185 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 64 </integerConstant>
<symbol> , </symbol>
<integerConstant> 28686 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 96 </integerConstant>
<symbol> , </symbol>
<integerConstant> 14364 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 128 </integerConstant>
<symbol> , </symbol>
<integerConstant> 7224 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 160 </integerConstant>
<symbol> , </symbol>
<integerConstant> 3696 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 192 </integerConstant>
<symbol> , </symbol>
<integerConstant> 2016 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 224 </integerConstant>
<symbol> , </symbol>
<integerConstant> 960 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 256 </integerConstant>
<symbol> , </symbol>
<integerConstant> 960 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 288 </integerConstant>
<symbol> , </symbol>
<integerConstant> 2016 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 320 </integerConstant>
<symbol> , </symbol>
<integerConstant> 3696 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 352 </integerConstant>
<symbol> , </symbol>
<integerConstant> 7224 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 384 </integerConstant>
<symbol> , </symbol>
<integerConstant> 14364 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 416 </integerConstant>
<symbol> , </symbol>
<integerConstant> 28686 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 448 </integerConstant>
<symbol> , </symbol>
<symbol> - </symbol>
<integerConstant> 8185 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> memAddress </identifier>
<symbol> + </symbol>
<integerConstant> 480 </integerConstant>
<symbol> , </symbol>
<symbol> - </symbol>
<integerConstant> 16381 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawO </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawCircle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawBoard </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> curAr </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> cur </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> halfSquareSize </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> squareSize </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> squareSize </identifier>
<symbol> * </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> squareSize </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> borderThickness </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> squareSize </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> squareSize </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> borderThickness </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> squareSize </identifier>
<symbol> * </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> halfSquareSize </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> squareSize </identifier>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> curAr </identifier>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cur </identifier>
<symbol> = </symbol>
<identifier> curAr </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> cur </identifier>
<symbol> = </symbol>
<identifier> X_VAL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> drawX </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> * </symbol>
<identifier> squareSize </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> halfSquareSize </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> * </symbol>
<identifier> squareSize </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> halfSquareSize </identifier>
<symbol> - </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> cur </identifier>
<symbol> = </symbol>
<identifier> O_VAL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> drawO </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> * </symbol>
<identifier> squareSize </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> halfSquareSize </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> * </symbol>
<identifier> squareSize </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> halfSquareSize </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> printBoard </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> curAr </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> cur </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> | </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> curAr </identifier>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cur </identifier>
<symbol> = </symbol>
<identifier> curAr </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> cur </identifier>
<symbol> = </symbol>
<identifier> X_VAL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> x </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> cur </identifier>
<symbol> = </symbol>
<identifier> O_VAL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> o </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> cur </identifier>
<symbol> = </symbol>
<identifier> EMPTY_VAL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant>   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> | </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> div </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> result </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> div </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> div </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> result </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> result </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
