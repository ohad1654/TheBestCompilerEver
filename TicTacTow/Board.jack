/** 
 * This class implements the Tic-Tac-Tow board
 */
class Board{
    field Array board;
    field int x; // x value of top-left corner of the screen
    field int y; // x value of top-left corner of the screen
    field int squareSize; // size of the board for drawing purposes (relative to screen size).
    field int borderThickness;
    field int EMPTY_VAL;
    field int X_VAL;
    field int O_VAL;

    /** Constructs a new Square Game. */
   constructor Board new(int Ax, int Ay, int AsquareSize, int AborderThickness) {
        let x = Ax;
        let y = Ay;
        let squareSize = AsquareSize;
        let borderThickness = AborderThickness;
        let EMPTY_VAL = 0;
        let X_VAL = 1;
        let O_VAL = 2;
        do initBoard();
        return this;
    }
    
    method void initBoard(){
        var int i,j;
        var Array temp;
        let board = Array.new(3);
        let i = 0;
        let j = 0;
        while(i < 3){
            let j = 0;
            let temp = Array.new(3);
            while(j < 3)
            {
                let temp[j] = EMPTY_VAL;
                let j = j+1;
            }
            let board[i] = temp;
            let i = i+1;
        }
        return;
    }
    
    method int getVal(int choice){
        var Array temp;
        var int i;
        var int j;
        if (choice>8){
            return -1;
        }
        let j = modulo(choice,3);
        let i = Math.divide(choice-j,3);
        let temp = board[i];
        return temp[j];
    }

    method void setVal(int choice, int val){
        var Array temp;
        var int i;
        var int j;
        let j = modulo(choice,3);
        let i = Math.divide(choice-j,3);
        let temp = board[i];
        let temp[j] = val;
        return;
    }

    method void drawX(int x, int y){
        var int location;
        var int memAddress;
        let location = Math.multiply(y,32)+Math.divide(x,16);
        let memAddress = location+16384;
        do Memory.poke(memAddress+0, -16381);
        do Memory.poke(memAddress+32, -8185);
        do Memory.poke(memAddress+64, 28686);
        do Memory.poke(memAddress+96, 14364);
        do Memory.poke(memAddress+128, 7224);
        do Memory.poke(memAddress+160, 3696);
        do Memory.poke(memAddress+192, 2016);
        do Memory.poke(memAddress+224, 960);
        do Memory.poke(memAddress+256, 960);
        do Memory.poke(memAddress+288, 2016);
        do Memory.poke(memAddress+320, 3696);
        do Memory.poke(memAddress+352, 7224);
        do Memory.poke(memAddress+384, 14364);
        do Memory.poke(memAddress+416, 28686);
        do Memory.poke(memAddress+448, -8185);
        do Memory.poke(memAddress+480, -16381);
        return;
    }

    method void drawO(int x, int y, int size){
        do Screen.drawCircle(x,y,size);
        return;
    }

    method void drawBoard(){
        var Array curAr;
        var String cur;
        var int halfSquareSize;
        var int i;
        var int j;
        let i = 0;        
        //draw borders:
        do Screen.setColor(true);
        //draw horizonal borders
        while(i < 4){
            do Screen.drawRectangle(x,y+(squareSize*i),x+(squareSize*3),y+(squareSize*i)+borderThickness);//no kdimut operators!!
            let i = i + 1;
        }
        //draw vertical borders
        let i = 0;
        while(i < 4){
            do Screen.drawRectangle(x+(squareSize*i),y,x+(squareSize*i)+borderThickness,y+(squareSize*3));//no kdimut operators!!
            let i = i + 1;
        }
        let halfSquareSize = Math.divide(squareSize, 2);
        //draw X's and O's:
        let i = 0;
        while(i < 3){
            let j = 0;
            while(j < 3)
            {
                let curAr = board[i];
                let cur = curAr[j];
                if (cur = X_VAL) {
                    do drawX(x+(j*squareSize)+halfSquareSize,y+(i*squareSize)+halfSquareSize-5);// -5!
                }
                if (cur = O_VAL) {
                    do drawO(x+(j*squareSize)+halfSquareSize,y+(i*squareSize)+halfSquareSize+2,10);
                }
                let j = j+1;
            }
            let i = i+1;
        }
        return;
    }

    
    /*print the bord as characters. top-left corner is located by x,y
     * where:
     * y is col (in range 0..63)
     * x is row (in range 0..22)
    /* example:
     *|X|O|X|
     *|X|X|X|
     *|O|O|X|
     */
    method void printBoard(int x, int y){ 
        var Array curAr;
        var int cur;
        var int i;
        var int j;
        let i = 0;
        let j = 0;
        while(i < 3){
            do Output.moveCursor(x+i,y);
            let j = 0;
            do Output.printString("|");
            while(j < 3)
            {
                let curAr = board[i];
                let cur = curAr[j];
                if(cur = X_VAL){
                    do Output.printString("x");
                }
                if(cur = O_VAL){
                    do Output.printString("o");
                }
                if(cur = EMPTY_VAL){
                    do Output.printString(" ");
                }
                do Output.printString("|");
                let j = j+1;
            }
            do Output.println();
            let i = i+1;
        }
        return;
    }

    method int modulo(int x, int y){
        var int div;
        var int temp;
        var int result;
        let div = Math.divide(x,y);
        let temp = Math.multiply(div, y);
        let result = x-temp;
        return result;
    }
   
}