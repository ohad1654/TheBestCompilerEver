<tokens>
<keyword> class </keyword>
<identifier> TicTacTowGame </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Board </identifier>
<identifier> board </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Logger </identifier>
<identifier> logger </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> EMPTY_VAL </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> X_VAL </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> O_VAL </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> SCREEN_WIDTH </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> SCREEN_HEIGHT </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> LOGGER_WIDTH </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> LOGGER_HEIGHT </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> LOGGER_SPACE_FROM_TOP </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> SPACE_BET_LOGGER_BOARD </identifier>
<symbol> ; </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> constructLogger </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> x2 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> , </symbol>
<identifier> y2 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> SCREEN_WIDTH </identifier>
<symbol> - </symbol>
<identifier> LOGGER_WIDTH </identifier>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> + </symbol>
<identifier> LOGGER_WIDTH </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<identifier> LOGGER_SPACE_FROM_TOP </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y2 </identifier>
<symbol> = </symbol>
<identifier> LOGGER_SPACE_FROM_TOP </identifier>
<symbol> + </symbol>
<identifier> LOGGER_HEIGHT </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> logger </identifier>
<symbol> = </symbol>
<identifier> Logger </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> y1 </identifier>
<symbol> , </symbol>
<identifier> x2 </identifier>
<symbol> , </symbol>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> constructor </keyword>
<identifier> TicTacTowGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> SCREEN_HEIGHT </identifier>
<symbol> = </symbol>
<integerConstant> 255 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> SCREEN_WIDTH </identifier>
<symbol> = </symbol>
<integerConstant> 511 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> LOGGER_WIDTH </identifier>
<symbol> = </symbol>
<integerConstant> 350 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> LOGGER_HEIGHT </identifier>
<symbol> = </symbol>
<integerConstant> 60 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> LOGGER_SPACE_FROM_TOP </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> SPACE_BET_LOGGER_BOARD </identifier>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> constructLogger </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> board </identifier>
<symbol> = </symbol>
<identifier> Board </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 175 </integerConstant>
<symbol> , </symbol>
<identifier> LOGGER_HEIGHT </identifier>
<symbol> + </symbol>
<identifier> LOGGER_SPACE_FROM_TOP </identifier>
<symbol> + </symbol>
<identifier> SPACE_BET_LOGGER_BOARD </identifier>
<symbol> , </symbol>
<integerConstant> 50 </integerConstant>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> EMPTY_VAL </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> X_VAL </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> O_VAL </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> winner </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> curruntPlayer </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> choice </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> flag </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> fullSpotConter </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> flag </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> curruntPlayer </identifier>
<symbol> = </symbol>
<identifier> X_VAL </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> drawBoard </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> logger </identifier>
<symbol> . </symbol>
<identifier> drawBorders </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> logger </identifier>
<symbol> . </symbol>
<identifier> printBoard </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> winner </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> fullSpotConter </identifier>
<symbol> &lt; </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> choice </identifier>
<symbol> = </symbol>
<identifier> logger </identifier>
<symbol> . </symbol>
<identifier> getTurn </identifier>
<symbol> ( </symbol>
<identifier> curruntPlayer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> EMPTY_VAL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> logger </identifier>
<symbol> . </symbol>
<identifier> clearErrorMessage </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> setVal </identifier>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> , </symbol>
<identifier> curruntPlayer </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> winner </identifier>
<symbol> = </symbol>
<identifier> calcWinner </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> drawBoard </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fullSpotConter </identifier>
<symbol> = </symbol>
<identifier> fullSpotConter </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> curruntPlayer </identifier>
<symbol> = </symbol>
<identifier> curruntPlayer </identifier>
<symbol> + </symbol>
<identifier> flag </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> flag </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> flag </identifier>
<symbol> , </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> logger </identifier>
<symbol> . </symbol>
<identifier> printErrorSpotMessage </identifier>
<symbol> ( </symbol>
<identifier> choice </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> logger </identifier>
<symbol> . </symbol>
<identifier> printWinner </identifier>
<symbol> ( </symbol>
<identifier> winner </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> calcWinner </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> iMul3 </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> iMul3 </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> iMul3 </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> iMul3 </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> iMul3 </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> iMul3 </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> iMul3 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 3 </integerConstant>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 3 </integerConstant>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 6 </integerConstant>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> getVal </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
